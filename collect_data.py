import tkinter as tk
from tkinter import ttk, filedialog, messagebox
import cv2
import os
import numpy as np
import csv
import json
from datetime import datetime
import threading
import queue
import time
import uuid
from ultralytics import YOLO
from PIL import Image, ImageTk  # –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤


class DataCollector:
    def __init__(self, root):
        self.root = root
        self.root.title("–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π")
        self.root.geometry("900x700")
        self.root.configure(bg="#f0f0f0")

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.is_recording = False
        self.start_time = None
        self.video_writer = None
        self.cap = None
        self.frame_queue = queue.Queue(maxsize=10)
        self.csv_file = None
        self.csv_writer = None
        self.current_label = "correct"  # –¢–µ–∫—É—â–∞—è –º–µ—Ç–∫–∞: correct –∏–ª–∏ incorrect

        # –°—á—ë—Ç—á–∏–∫–∏ –ø–∞–ø–æ–∫
        self.correct_count = self.get_folder_count("correct")
        self.incorrect_count = self.get_folder_count("incorrect")

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()

        # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
        self.update_timer()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ YOLO –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ç–æ—á–µ–∫
        self.model = YOLO('yolov8l-pose.pt')

    def get_folder_count(self, folder_name):
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–∞–ø–æ–∫ —Å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
        base_records_folder = os.path.join(desktop_path, "–°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        records_folder = os.path.join(base_records_folder, folder_name)

        if not os.path.exists(records_folder):
            return 0

        folders = [d for d in os.listdir(records_folder) if os.path.isdir(os.path.join(records_folder, d))]
        return len(folders)

    def create_widgets(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = ttk.Frame(self.root)
        title_frame.pack(pady=10)
        title_label = ttk.Label(title_frame, text="–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π", font=('Arial', 16, 'bold'))
        title_label.pack()

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_frame = ttk.Frame(self.root)
        button_frame.pack(pady=10)

        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ç–∫–∏
        self.correct_btn = ttk.Button(button_frame, text="‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–µ",
                                      command=lambda: self.set_label("correct"), width=20)
        self.correct_btn.pack(side=tk.LEFT, padx=5)

        self.incorrect_btn = ttk.Button(button_frame, text="‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–µ",
                                        command=lambda: self.set_label("incorrect"), width=20)
        self.incorrect_btn.pack(side=tk.LEFT, padx=5)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞/–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏
        self.record_btn = ttk.Button(button_frame, text="‚ñ∂ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å",
                                     command=self.toggle_recording, width=20)
        self.record_btn.pack(side=tk.LEFT, padx=5)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
        self.load_btn = ttk.Button(button_frame, text="üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –≤–∏–¥–µ–æ",
                                   command=self.load_video_file, width=20)
        self.load_btn.pack(side=tk.LEFT, padx=5)

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        self.preview_btn = ttk.Button(button_frame, text="üëÅÔ∏è –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä",
                                      command=self.show_preview, width=20, state='disabled')
        self.preview_btn.pack(side=tk.LEFT, padx=5)

        # –¢–∞–π–º–µ—Ä
        self.timer_label = ttk.Label(button_frame, text="00:00:00",
                                     font=('Arial', 14, 'bold'), foreground="blue")
        self.timer_label.pack(side=tk.LEFT, padx=10)

        # –ú–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∏–¥–µ–æ
        self.video_label = ttk.Label(self.root, background="black", relief="solid", borderwidth=1)
        self.video_label.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏
        self.status_label = ttk.Label(self.root, text="–ì–æ—Ç–æ–≤–æ", font=('Arial', 10), foreground="gray")
        self.status_label.pack(side=tk.BOTTOM, pady=5)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –º–µ—Ç–∫–µ
        self.label_info = ttk.Label(self.root, text="–¢–µ–∫—É—â–∞—è –º–µ—Ç–∫–∞: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–µ",
                                    font=('Arial', 10, 'bold'), foreground="green")
        self.label_info.pack(side=tk.BOTTOM, pady=5)

    def set_label(self, label_type):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –º–µ—Ç–∫–∏"""
        self.current_label = label_type
        if label_type == "correct":
            self.label_info.config(text="–¢–µ–∫—É—â–∞—è –º–µ—Ç–∫–∞: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–µ", foreground="green")
            self.correct_btn.config(state='disabled')
            self.incorrect_btn.config(state='normal')
        else:
            self.label_info.config(text="–¢–µ–∫—É—â–∞—è –º–µ—Ç–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–µ", foreground="red")
            self.correct_btn.config(state='normal')
            self.incorrect_btn.config(state='disabled')

    def toggle_recording(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
        if not self.is_recording:
            self.start_recording()
        else:
            self.stop_recording()

    def start_recording(self):
        """–ó–∞–ø—É—Å–∫ –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ –∏ CSV"""
        self.is_recording = True
        self.start_time = time.time()
        self.record_btn.config(text="‚ñ† –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
        self.status_label.config(text="–ó–∞–ø–∏—Å—å –≤–µ–¥—ë—Ç—Å—è...", foreground="red")
        self.preview_btn.config(state='disabled')  # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä—ã
        self.cap = cv2.VideoCapture(0)
        if not self.cap.isOpened():
            self.show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É!")
            return

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã
        self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)
        self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã –∫–∞–¥—Ä–∞
        ret, frame = self.cap.read()
        if not ret:
            self.show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä —Å –∫–∞–º–µ—Ä—ã!")
            return

        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ —Å —É—á–µ—Ç–æ–º –º–µ—Ç–∫–∏
        video_filename, csv_filename = self.generate_unique_filenames(self.current_label)

        # –°–æ–∑–¥–∞–µ–º VideoWriter
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        self.video_writer = cv2.VideoWriter(
            video_filename, fourcc, 20,
            (frame.shape[1], frame.shape[0])
        )

        # –°–æ–∑–¥–∞–µ–º CSV-—Ñ–∞–π–ª
        self.csv_file = open(csv_filename, 'w', newline='', encoding='utf-8')
        self.csv_writer = csv.writer(self.csv_file)
        headers = ['timestamp'] + [f'point_{i}_{coord}' for i in range(17) for coord in ['x', 'y']]
        self.csv_writer.writerow(headers)

        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
        self.process_thread = threading.Thread(
            target=self.process_camera_video,
            daemon=True
        )
        self.process_thread.start()

    def stop_recording(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ –∏ CSV"""
        self.is_recording = False
        self.record_btn.config(text="‚ñ∂ –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å")
        self.status_label.config(text="–ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", foreground="gray")
        self.preview_btn.config(state='normal')  # –í–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏

        # –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
        if hasattr(self, 'cap'):
            self.cap.release()
        if hasattr(self, 'video_writer'):
            self.video_writer.release()
        if hasattr(self, 'csv_file') and self.csv_file:
            self.csv_file.close()

    def process_camera_video(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ —Å –∫–∞–º–µ—Ä—ã"""
        while self.is_recording:
            ret, frame = self.cap.read()
            if not ret:
                break

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞ YOLO
            results = self.model(frame)
            annotated_frame = results[0].plot()

            # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∫–∏—Å—Ç–µ–π (–≤–∞–∂–Ω–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è!)
            keypoints = results[0].keypoints.xy.cpu().numpy()
            if len(keypoints) > 0:
                kp = keypoints[0]
                # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∫–∏—Å—Ç–µ–π (—Ç–æ—á–∫–∏ 17 –∏ 18)
                for idx in [17, 18]:
                    x, y = int(kp[idx][0]), int(kp[idx][1])
                    cv2.circle(annotated_frame, (x, y), 8, (0, 255, 0), -1)  # –ó–µ–ª—ë–Ω—ã–π –∫—Ä—É–≥

            # –ó–∞–ø–∏—Å—å –≤ –≤–∏–¥–µ–æ—Ñ–∞–π–ª
            self.video_writer.write(annotated_frame)

            # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏
            keypoints = results[0].keypoints.xy.cpu().numpy()
            timestamp = time.time() - self.start_time

            # –ó–∞–ø–∏—Å—å –≤ CSV: —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–∞—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–∞—è –ø–µ—Ä—Å–æ–Ω–∞
            if len(keypoints) > 0:
                row = [f"{timestamp:.3f}"]  # –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö —Å —Ç–æ—á–Ω–æ—Å—Ç—å—é 0.001
                for x, y in keypoints[0]:  # –ü–µ—Ä–≤–∞—è –ø–µ—Ä—Å–æ–Ω–∞, 17 —Ç–æ—á–µ–∫
                    row.extend([f"{x:.3f}", f"{y:.3f}"])
                self.csv_writer.writerow(row)

            # –ü–µ—Ä–µ–¥–∞—á–∞ –∫–∞–¥—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            try:
                self.frame_queue.put_nowait(cv2.cvtColor(annotated_frame, cv2.COLOR_BGR2RGB))
            except queue.Full:
                pass

    def load_video_file(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞"""
        video_path = filedialog.askopenfilename(
            title="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª",
            filetypes=[("–í–∏–¥–µ–æ —Ñ–∞–π–ª—ã", "*.mp4 *.avi *.mov *.mkv")]
        )
        if not video_path:
            return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ –º–µ—Ç–∫–∞
        if not messagebox.askyesno(
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –º–µ—Ç–∫–∏",
                f"–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∏–¥–µ–æ –∫–∞–∫ '{'–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ' if self.current_label == 'correct' else '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ'}' –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–µ?"):
            return

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
        cap = cv2.VideoCapture(video_path)
        if not cap.isOpened():
            self.show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∏–¥–µ–æ—Ñ–∞–π–ª!")
            return

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ
        fps = cap.get(cv2.CAP_PROP_FPS) or 20.0
        width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
        video_filename, csv_filename = self.generate_unique_filenames(self.current_label)

        # –°–æ–∑–¥–∞–µ–º VideoWriter
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        video_writer = cv2.VideoWriter(video_filename, fourcc, fps, (width, height))

        # –°–æ–∑–¥–∞–µ–º CSV-—Ñ–∞–π–ª
        csv_file = open(csv_filename, 'w', newline='', encoding='utf-8')
        csv_writer = csv.writer(csv_file)
        headers = ['timestamp'] + [f'point_{i}_{coord}' for i in range(17) for coord in ['x', 'y']]
        csv_writer.writerow(headers)

        frame_count = 0
        self.status_label.config(text="–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ...", foreground="orange")

        while True:
            ret, frame = cap.read()
            if not ret:
                break

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ YOLO
            results = self.model(frame)
            annotated_frame = results[0].plot()

            # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∫–∏—Å—Ç–µ–π
            keypoints = results[0].keypoints.xy.cpu().numpy()
            if len(keypoints) > 0:
                kp = keypoints[0]
                for idx in [17, 18]:
                    x, y = int(kp[idx][0]), int(kp[idx][1])
                    cv2.circle(annotated_frame, (x, y), 8, (0, 255, 0), -1)

            video_writer.write(annotated_frame)

            # –ö–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏
            keypoints = results[0].keypoints.xy.cpu().numpy()
            timestamp = frame_count / fps

            if len(keypoints) > 0:
                row = [f"{timestamp:.3f}"]
                for x, y in keypoints[0]:
                    row.extend([f"{x:.3f}", f"{y:.3f}"])
                csv_writer.writerow(row)

            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–∞–∂–¥—ã–µ 30 –∫–∞–¥—Ä–æ–≤
            if frame_count % 30 == 0:
                self.display_frame(cv2.cvtColor(annotated_frame, cv2.COLOR_BGR2RGB))
                self.root.update_idletasks()

            frame_count += 1

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        cap.release()
        video_writer.release()
        csv_file.close()

        self.status_label.config(text="–í–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", foreground="green")
        messagebox.showinfo("–ì–æ—Ç–æ–≤–æ", f"–í–∏–¥–µ–æ –∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É:\n{os.path.dirname(video_filename)}")

    def generate_unique_filenames(self, label):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ —Å —É—á–µ—Ç–æ–º –º–µ—Ç–∫–∏ (correct/incorrect)"""
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ
        desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
        base_records_folder = os.path.join(desktop_path, "–°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        records_folder = os.path.join(base_records_folder, label)  # –ü–æ–¥–ø–∞–ø–∫–∞ correct –∏–ª–∏ incorrect

        if not os.path.exists(records_folder):
            os.makedirs(records_folder)

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏
        count = self.correct_count if label == "correct" else self.incorrect_count
        folder_name = f"{count + 1:04d}"
        folder_path = os.path.join(records_folder, folder_name)

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É
        os.makedirs(folder_path)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫
        if label == "correct":
            self.correct_count += 1
        else:
            self.incorrect_count += 1

        # –ò–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤
        video_filename = os.path.join(folder_path, "video.mp4")
        csv_filename = os.path.join(folder_path, "data.csv")

        return video_filename, csv_filename

    def update_timer(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞–¥—Ä–æ–≤"""
        if self.is_recording:
            elapsed = int(time.time() - self.start_time)
            hours, rem = divmod(elapsed, 3600)
            mins, secs = divmod(rem, 60)
            self.timer_label.config(text=f"{hours:02}:{mins:02}:{secs:02}")

        # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–¥—Ä –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        try:
            frame = self.frame_queue.get_nowait()
            self.display_frame(frame)
        except queue.Empty:
            pass

        # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ 33 –º—Å (~30 FPS)
        self.root.after(33, self.update_timer)

    def display_frame(self, frame):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ –≤ Label —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º PIL"""
        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–∞–¥—Ä
        img_resized = self.resize_frame(frame)

        # –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç Image –∏–∑ –º–∞—Å—Å–∏–≤–∞
        pil_image = Image.fromarray(img_resized)

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PhotoImage –¥–ª—è Tkinter
        photo = ImageTk.PhotoImage(image=pil_image)

        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∫—É
        self.video_label.config(image=photo)
        self.video_label.image = photo  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–±–æ—Ä–∫–∏ –º—É—Å–æ—Ä–∞

    def resize_frame(self, frame):
        """–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–¥—Ä–∞ –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞"""
        width = self.video_label.winfo_width()
        height = self.video_label.winfo_height()

        if width <= 0 or height <= 0:
            return frame  # –ù–µ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º, –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –Ω–µ –∏–∑–≤–µ—Å—Ç–Ω—ã

        aspect_ratio = frame.shape[1] / frame.shape[0]
        new_width = min(width, int(height * aspect_ratio))
        new_height = min(height, int(width / aspect_ratio))

        return cv2.resize(frame, (new_width, new_height))

    def show_preview(self):
        """–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–∞–ø–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏
        desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
        base_records_folder = os.path.join(desktop_path, "–°–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        records_folder = os.path.join(base_records_folder, self.current_label)

        if not os.path.exists(records_folder):
            self.show_error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!")
            return

        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–∞–ø–∫—É –ø–æ –∏–º–µ–Ω–∏
        folders = [d for d in os.listdir(records_folder) if os.path.isdir(os.path.join(records_folder, d))]
        if not folders:
            self.show_error("–ù–µ—Ç –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ!")
            return

        latest_folder = sorted(folders, reverse=True)[0]
        folder_path = os.path.join(records_folder, latest_folder)
        video_path = os.path.join(folder_path, "video.mp4")

        if not os.path.exists(video_path):
            self.show_error("–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return

        # –ó–∞–ø—É—Å–∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
        preview_window = tk.Toplevel(self.root)
        preview_window.title("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤–∏–¥–µ–æ")
        preview_window.geometry("800x600")

        # –ü—Ä–æ—Å—Ç–æ–π –≤–∏–¥–µ–æ–ø–ª–µ–µ—Ä
        preview_label = ttk.Label(preview_window, background="black", relief="solid", borderwidth=1)
        preview_label.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
        cap = cv2.VideoCapture(video_path)
        if not cap.isOpened():
            self.show_error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ!")
            preview_window.destroy()
            return

        # –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        def play_video():
            ret, frame = cap.read()
            if ret:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–∞–¥—Ä
                frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                img = Image.fromarray(frame_rgb)
                photo = ImageTk.PhotoImage(img)
                preview_label.config(image=photo)
                preview_label.image = photo
                preview_label.after(33, play_video)  # ~30 FPS
            else:
                preview_window.destroy()

        play_video()

    def show_error(self, message):
        """–ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
        error_window = tk.Toplevel(self.root)
        error_window.title("–û—à–∏–±–∫–∞")
        ttk.Label(error_window, text=message, padding=20).pack()
        ttk.Button(error_window, text="OK", command=error_window.destroy).pack(pady=10)


if __name__ == "__main__":
    root = tk.Tk()
    app = DataCollector(root)
    root.mainloop()